async function ##functionName##(params, callback) {
    return new Promise((resolve, reject) => {
        logger.log("##tableName##Provider->##functionName## Started: " + JSON.stringify(params));
        const db = new sqlite3.Database(dbHelper.ReturnDBPath(), (error) => {
			if (error) {
				logger.error("Database error: " + error.message);
                return reject(error);
			}
            db.serialize(() => {
                let result = [];
                logger.log("##tableName##Provider->##functionName## Started with params: " + JSON.stringify(params));
                db.each(`SELECT ##selectFields## FROM ##selectFrom## ##whereString##`, [##whereParams##], (error, row) => {
                    if (error) {console.error(error); return;}
                    let recordToReturn = 
    ##FieldsAsObject##                
                    result.push(recordToReturn);
                },
                function() {
                    logger.log("##tableName##Provider->##functionName## Finished (callback)");
                    logger.log("##tableName##Provider->##functionName## this is the result: " + JSON.stringify(result));
                    resolve(result);
                    if (callback != null) callback(null, result);
                });
            });
        });
    });
}