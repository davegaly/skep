// ##functionName##
async function ##functionName##(params) {
    logger.log("##tableName##Provider->##functionName## Started: " + JSON.stringify(params));
    try {
        const db = await new sqlite3.Database(dbHelper.ReturnDBPath());
        const result = await new Promise((resolve, reject) => {
            let resultObject = {};
            logger.log("##tableName##Provider->##functionName## Started with params: " + JSON.stringify(params));

            db.serialize(() => {
                db.each(`SELECT ##selectFields## FROM ##selectFrom## ##whereString##`, [##whereParams##],
                    (error, row) => {
                        if (error) {
                            logger.error(error.message);
                            return reject(error);
                        }
                        let recordToReturn = ##FieldsAsObject##;
                        resultObject = recordToReturn; // Since it's a single result, we overwrite resultObject
                    },
                    (err) => {
                        if (err) {
                            logger.error(err.message);
                            return reject(err);
                        }
                        logger.log("##tableName##Provider->##functionName## Finished (Promise resolved)");
                        resolve(resultObject);
                    }
                );
            });
        });
        db.close();
        logger.log("##tableName##Provider->##functionName## this is the result: " + JSON.stringify(result));
        return result;
    } catch (error) {
        logger.error("##tableName##Provider->##functionName## error: " + error.message);
        throw error;
    }
}
